{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","state","isTitleFilled","isImdbIdFilled","isImgUrlFilled","isImdbUrlFilled","isImgUrlValid","isImdbUrlValid","validateInput","e","getCheckedUrlInput","target","name","value","validationName","toUpperCase","slice","includes","setState","Boolean","regExp","urlValidationName","test","changeInputValue","changeTextAreaValue","clearForm","sendForm","preventDefault","props","addMovie","this","isFormValid","onSubmit","htmlFor","id","type","onChange","onBlur","placeholder","classNames","disabled","Component","App","moviesFromServer","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81e97596.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport { Component } from 'react';\nimport './NewMovie.scss';\n\ntype Props = {\n  addMovie: (movie: Movie) => void,\n};\n\ntype State = {\n  title: string,\n  description: string,\n  imgUrl: string,\n  imdbUrl: string,\n  imdbId: string,\n  isTitleFilled: boolean,\n  isImdbIdFilled: boolean,\n  isImgUrlFilled: boolean,\n  isImdbUrlFilled: boolean,\n  isImgUrlValid: boolean,\n  isImdbUrlValid: boolean,\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleFilled: true,\n    isImdbIdFilled: true,\n    isImgUrlFilled: true,\n    isImdbUrlFilled: true,\n    isImgUrlValid: true,\n    isImdbUrlValid: true,\n  };\n\n  validateInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { getCheckedUrlInput } = this;\n    const { name, value } = e.target;\n    const validationName = `is${name[0].toUpperCase() + name.slice(1)}Filled`;\n\n    if (name.includes('Url')) {\n      getCheckedUrlInput(name, validationName, value);\n\n      return;\n    }\n\n    this.setState(state => ({\n      ...state,\n      [validationName]: Boolean(value),\n    }));\n  };\n\n  getCheckedUrlInput = (name: string, validationName: string, value: string) => {\n    const regExp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n    const urlValidationName = `is${name[0].toUpperCase() + name.slice(1)}Valid`;\n\n    this.setState(state => ({\n      ...state,\n      [validationName]: Boolean(value),\n      [urlValidationName]: value ? regExp.test(value) : true,\n    }));\n  };\n\n  changeInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(state => ({\n      ...state,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  changeTextAreaValue = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ description: e.target.value });\n  };\n\n  clearForm = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  sendForm = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    this.props.addMovie(this.state);\n    this.clearForm();\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      isTitleFilled,\n      isImdbIdFilled,\n      isImgUrlFilled,\n      isImdbUrlFilled,\n      isImdbUrlValid,\n      isImgUrlValid,\n    } = this.state;\n\n    const {\n      validateInput,\n      changeInputValue,\n      changeTextAreaValue,\n      sendForm,\n    } = this;\n\n    const isFormValid = title && imgUrl && imdbUrl\n       && imdbId && isImdbUrlValid && isImgUrlValid;\n\n    return (\n      <form onSubmit={sendForm} className=\"form\">\n        <label htmlFor=\"movie-title\" className=\"form__field\">\n          <div>\n            Movie title:\n          </div>\n          <input\n            id=\"movie-title\"\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter movie title\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !isTitleFilled },\n            )}\n          />\n          {isTitleFilled || (\n            <div className=\"error\">\n              This field is required\n            </div>\n          )}\n        </label>\n\n        <label htmlFor=\"movie-description\" className=\"form__field\">\n          <div>\n            Movie description:\n          </div>\n          <textarea\n            id=\"movie-description\"\n            name=\"description\"\n            value={description}\n            onChange={changeTextAreaValue}\n            placeholder=\"Enter movie description...\"\n            className=\"form__description form__input\"\n          />\n        </label>\n\n        <label htmlFor=\"movie-imgUrl\" className=\"form__field\">\n          <div>\n            Movie image url:\n          </div>\n          <input\n            id=\"movie-imgUrl\"\n            type=\"text\"\n            name=\"imgUrl\"\n            value={imgUrl}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter image url\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !isImgUrlFilled || !isImgUrlValid },\n            )}\n          />\n          {(isImgUrlFilled && isImgUrlValid) || (\n            <div className=\"error\">\n              {!isImgUrlValid ? 'Url is not valid' : 'This field is required'}\n            </div>\n          )}\n        </label>\n\n        <label htmlFor=\"movie-imdb-url\" className=\"form__field\">\n          <div>\n            Movie imdb url:\n          </div>\n          <input\n            id=\"movie-imdb-url\"\n            type=\"text\"\n            name=\"imdbUrl\"\n            value={imdbUrl}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter imdb url\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !isImdbUrlFilled || !isImdbUrlValid },\n            )}\n          />\n          {(isImdbUrlFilled && isImdbUrlValid) || (\n            <div className=\"error\">\n              {!isImdbUrlValid ? 'Url is not valid' : 'This field is required'}\n            </div>\n          )}\n        </label>\n\n        <label htmlFor=\"movie-imdb-id\" className=\"form__field\">\n          <div>\n            Movie imdb id:\n          </div>\n          <input\n            id=\"movie-imdb-id\"\n            type=\"text\"\n            name=\"imdbId\"\n            value={imdbId}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter imdb\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !isImdbIdFilled },\n            )}\n          />\n          {isImdbIdFilled || (\n            <div className=\"error\">\n              This field is required\n            </div>\n          )}\n        </label>\n\n        <button\n          type=\"submit\"\n          disabled={!isFormValid}\n          className={classNames(\n            'form__submit-button',\n            { 'form__submit-button--disabled': !isFormValid },\n          )}\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => {\n      return { movies: [...state.movies, movie] };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n    const { addMovie } = this;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}