{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","state","newMovie","validation","isTitleFilled","isImdbIdFilled","isImgUrlFilled","isImdbUrlFilled","isImgUrlValid","isImdbUrlValid","validateInput","e","getCheckedUrlInput","target","name","value","validationName","toUpperCase","slice","includes","setState","Boolean","regExp","urlValidationName","test","changeInputValue","changeTextAreaValue","clearForm","checkFormIsValid","sendForm","preventDefault","props","addMovie","this","onSubmit","onChange","htmlFor","id","type","onBlur","placeholder","classNames","disabled","Component","App","moviesFromServer","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8087d3dd.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport { Component } from 'react';\nimport './NewMovie.scss';\n\ntype Props = {\n  addMovie: (movie: Movie) => void,\n};\n\ntype State = {\n  newMovie: Movie,\n  validation: Validation,\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    newMovie: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    validation: {\n      isTitleFilled: true,\n      isImdbIdFilled: true,\n      isImgUrlFilled: true,\n      isImdbUrlFilled: true,\n      isImgUrlValid: true,\n      isImdbUrlValid: true,\n    },\n  };\n\n  validateInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { getCheckedUrlInput } = this;\n    const { name, value } = e.target;\n    const validationName = `is${name[0].toUpperCase() + name.slice(1)}Filled`;\n\n    if (name.includes('Url')) {\n      getCheckedUrlInput(name, validationName, value);\n\n      return;\n    }\n\n    this.setState(state => ({\n      validation: {\n        ...state.validation,\n        [validationName]: Boolean(value),\n      },\n    }));\n  };\n\n  getCheckedUrlInput = (name: string, validationName: string, value: string) => {\n    const regExp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n    const urlValidationName = `is${name[0].toUpperCase() + name.slice(1)}Valid`;\n\n    this.setState(state => ({\n      validation: {\n        ...state.validation,\n        [validationName]: Boolean(value),\n        [urlValidationName]: value ? regExp.test(value) : true,\n      },\n    }));\n  };\n\n  changeInputValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState(state => ({\n      newMovie: {\n        ...state.newMovie,\n        [e.target.name]: e.target.value,\n      },\n    }));\n  };\n\n  changeTextAreaValue = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState(state => ({\n      newMovie: {\n        ...state.newMovie,\n        description: e.target.value,\n      },\n    }));\n  };\n\n  clearForm = () => {\n    this.setState({\n      newMovie: {\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      },\n    });\n  };\n\n  checkFormIsValid = () => {\n    const { newMovie, validation } = this.state;\n\n    const isFormValid = newMovie.title\n      && newMovie.imgUrl\n      && newMovie.imdbUrl\n      && newMovie.imdbId\n      && validation.isImdbUrlValid\n      && validation.isImgUrlValid;\n\n    return isFormValid;\n  };\n\n  sendForm = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    this.props.addMovie(this.state.newMovie);\n    this.clearForm();\n  };\n\n  render() {\n    const {\n      newMovie,\n      validation,\n    } = this.state;\n\n    const {\n      validateInput,\n      changeInputValue,\n      changeTextAreaValue,\n      checkFormIsValid,\n      sendForm,\n    } = this;\n\n    return (\n      <form\n        onSubmit={sendForm}\n        onChange={checkFormIsValid}\n        className=\"form\"\n      >\n        <label htmlFor=\"movie-title\" className=\"form__field\">\n          <div>\n            Movie title:\n          </div>\n          <input\n            id=\"movie-title\"\n            type=\"text\"\n            name=\"title\"\n            value={newMovie.title}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter movie title\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !validation.isTitleFilled },\n            )}\n          />\n          {validation.isTitleFilled || (\n            <div className=\"error\">\n              This field is required\n            </div>\n          )}\n        </label>\n\n        <label htmlFor=\"movie-description\" className=\"form__field\">\n          <div>\n            Movie description:\n          </div>\n          <textarea\n            id=\"movie-description\"\n            name=\"description\"\n            value={newMovie.description}\n            onChange={changeTextAreaValue}\n            placeholder=\"Enter movie description...\"\n            className=\"form__description form__input\"\n          />\n        </label>\n\n        <label htmlFor=\"movie-imgUrl\" className=\"form__field\">\n          <div>\n            Movie image url:\n          </div>\n          <input\n            id=\"movie-imgUrl\"\n            type=\"text\"\n            name=\"imgUrl\"\n            value={newMovie.imgUrl}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter image url\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !validation.isImgUrlFilled || !validation.isImgUrlValid },\n            )}\n          />\n          {(validation.isImgUrlFilled && validation.isImgUrlValid) || (\n            <div className=\"error\">\n              {!validation.isImgUrlValid ? 'Url is not valid' : 'This field is required'}\n            </div>\n          )}\n        </label>\n\n        <label htmlFor=\"movie-imdb-url\" className=\"form__field\">\n          <div>\n            Movie imdb url:\n          </div>\n          <input\n            id=\"movie-imdb-url\"\n            type=\"text\"\n            name=\"imdbUrl\"\n            value={newMovie.imdbUrl}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter imdb url\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !validation.isImdbUrlFilled || !validation.isImdbUrlValid },\n            )}\n          />\n          {(validation.isImdbUrlFilled && validation.isImdbUrlValid) || (\n            <div className=\"error\">\n              {!validation.isImdbUrlValid ? 'Url is not valid' : 'This field is required'}\n            </div>\n          )}\n        </label>\n\n        <label htmlFor=\"movie-imdb-id\" className=\"form__field\">\n          <div>\n            Movie imdb id:\n          </div>\n          <input\n            id=\"movie-imdb-id\"\n            type=\"text\"\n            name=\"imdbId\"\n            value={newMovie.imdbId}\n            onChange={changeInputValue}\n            onBlur={validateInput}\n            placeholder=\"Enter imdb\"\n            className={classNames(\n              'form__input',\n              { 'form__input--not-valid': !validation.isImdbIdFilled },\n            )}\n          />\n          {validation.isImdbIdFilled || (\n            <div className=\"error\">\n              This field is required\n            </div>\n          )}\n        </label>\n\n        <button\n          type=\"submit\"\n          disabled={!checkFormIsValid()}\n          className={classNames(\n            'form__submit-button',\n            { 'form__submit-button--disabled': !checkFormIsValid() },\n          )}\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => {\n      return { movies: [...state.movies, movie] };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n    const { addMovie } = this;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}